found <- regmatches(x, regexec("([a-zA-Z ]+)\\(([0-9,]+)\\)- ([0-9]+)%", x))
return(paste(found[[1]][[2]], str_replace_all(found[[1]][[3]], ",", ""),found[[1]][[4]], sep=";"))
}
steam_numbers_norm <- steam_numbers_original %>%
mutate(date=sapply(date, parse_date_custom)) %>%
mutate(year_of_pub=sapply(date, extract_year)) %>%
mutate(category_norm=sapply(categories, extract_category)) %>%
mutate(price_norm=sapply(price, extract_price)) %>%
mutate(review_salient=sapply(all_reviews, parse_reviews)) %>%
mutate(review_salient30d=sapply(user_reviews, parse_reviews)) %>%
separate(review_salient, c("mood","total","positive%"), sep=";", convert=TRUE) %>%
separate(review_salient30d, c("mood30d","total30d","positive%30d"), sep=";", convert=TRUE) %>%
separate_rows(developer, sep = ", ") %>%
separate_rows(publisher, sep = ", ") %>%
mutate(publisher=sapply(publisher, replace_obscure_stuff)) %>%
mutate(developer=sapply(developer, replace_obscure_stuff)) %>%
#dopo separate_rows tramite ',' si creano nomi senza senso
#es Capcom U.S.A., Inc. diventa separato in due, simile per CAPCOM CO., LTD
#cerco di filtrare via questi casi
filter(!str_detect(tolower(replace_na(publisher, "")), "^(ltd|inc|llc)\\.?$")) %>%
filter(!str_detect(tolower(replace_na(developer, "")), "^(ltd|inc|llc)\\.?$"))
glimpse(steam_numbers_original)
glimpse(steam_numbers_norm)
num_of_games <- steam_numbers_norm%>%
select(name) %>%
distinct(name) %>%
summarize(count=n())
num_of_games
num_pub=steam_numbers_norm%>%
select(publisher) %>%
distinct(publisher) %>%
#arrange(publisher)
summarise(count=n())
num_pub
num_dev=steam_numbers_norm%>%
select(developer) %>%
distinct(developer) %>%
#arrange(developer)
summarise(count=n())
num_dev
devs_per_pub <- num_dev/num_pub
games_per_dev <- num_of_games/num_dev
pub_per_game <- num_pub/num_of_games
games_in_a_year<-steam_numbers_norm %>%
distinct(name, .keep_all = TRUE) %>%
select(year_of_pub) %>%
filter(!is.na(year_of_pub)) #%>%
#count(year_of_pub)
games_in_a_year
games_in_a_year_grouped <- games_in_a_year %>%
count(year_of_pub)
games_in_a_year_grouped
min_year <- min(games_in_a_year[["year_of_pub"]])
max_year <- max(games_in_a_year[["year_of_pub"]])
max_number <- max(games_in_a_year_grouped[["n"]])
#VECCHIO
#seq praticamente è il range() di python
#hist(games_in_a_year[["year_of_pub"]], xlab = "Anno", ylab = "Numero di pubblicazioni", main = "Numero di pubblicazioni per anno", breaks = c(min_year:max_year), col = "gold", axes=FALSE)
#axis(side=1, at=seq(min_year-0.5, max_year-0.5, 1), labels=seq(min_year, max_year, 1), las=2)
#axis(side=2, at=seq(0,max_number+1000, 1000), labels=seq(0,max_number+1000, 1000), las=2)
#CON GGPLOT
ggplot(data = games_in_a_year_grouped)+
geom_col(mapping = aes(x=.data[["year_of_pub"]], y=.data[["n"]]))+
labs(
title = "Videogiochi nel tempo",
subtitle = "Numero di pubblicazioni per anno di videogiochi sulla piattaforma Steam",
x = "Anno",
y = "Numero pubblicazioni"
)+
scale_x_discrete(breaks = seq(min_year, max_year, by = 5))
vr_games<-steam_numbers_norm %>%
distinct(name, .keep_all = TRUE) %>%
filter(str_detect(price, "VR Only|Supported")) %>%
mutate(vr_only=str_detect(price, "VR Only"))
vr_games
vr_in_a_year<-vr_games %>%
select(year_of_pub, vr_only) %>%
filter(!is.na(year_of_pub))
vr_in_a_year
vr_in_a_year_grouped <- vr_in_a_year %>%
count(vr_only, year_of_pub)
vr_in_a_year_grouped
min_year <- min(vr_in_a_year_grouped[["year_of_pub"]])
max_year <- max(vr_in_a_year_grouped[["year_of_pub"]])
max_number <- max(vr_in_a_year_grouped[["n"]])
ggplot(data = vr_in_a_year)+
geom_bar(mapping = aes(x=.data[["year_of_pub"]], fill=.data[["vr_only"]]))+
labs(
title = "Videogiochi VR",
subtitle = "Numero di pubblicazioni per anno di videogiochi con supporto per VR",
x = "Anno",
y = "Numero pubblicazioni"
)+
guides(fill=guide_legend(title="Supporto VR"))+
scale_fill_discrete(labels=c("VR Supportato","Esclusivamente VR"))+
scale_x_discrete(breaks=seq(min_year, max_year, by = 2))
categorized_games<-steam_numbers_norm %>%
distinct(name, .keep_all = TRUE) %>%
filter(!is.na(year_of_pub))
categorized_games
categorized_games_grouped <- categorized_games %>%
select(category_norm, year_of_pub) %>%
count(category_norm, year_of_pub)
categorized_games_grouped
min_year <- min(categorized_games_grouped[["year_of_pub"]])
max_year <- max(categorized_games_grouped[["year_of_pub"]])
ggplot(data = categorized_games)+
geom_bar(mapping = aes(x=.data[["year_of_pub"]], fill=.data[["category_norm"]]))+
labs(
title = "Categorie videogiochi",
subtitle = "Numero di pubblicazioni per anno di videogiochi di data categoria",
x = "Anno",
y = "Numero pubblicazioni"
)+
guides(fill=guide_legend(title="Categorie"))+
scale_fill_discrete(labels=c("Solo MMO", "Multiplayer no MMO", "Altro", "Solo Singleplayer"))+
scale_x_discrete(breaks=seq(min_year, max_year, by = 5))
games_w_prices<-steam_numbers_norm %>%
distinct(name, .keep_all = TRUE) %>%
filter(!is.na(year_of_pub))
games_w_prices
games_prices_summarized <- games_w_prices %>%
filter(!is.na(price_norm)) %>%
group_by(year_of_pub) %>%
mutate(mean_price_per_year=mean(price_norm)) %>%
mutate(median_price_per_year=median(price_norm)) %>%
select(year_of_pub,mean_price_per_year,median_price_per_year)
games_prices_summarized
min_year <- min(games_prices_summarized[["year_of_pub"]])
max_year <- max(games_prices_summarized[["year_of_pub"]])
ggplot(data = games_prices_summarized)+
geom_line(mapping = aes(x=.data[["year_of_pub"]], y=.data[["mean_price_per_year"]], color="Media", group = 1))+
geom_line(mapping = aes(x=.data[["year_of_pub"]], y=.data[["median_price_per_year"]], color="Mediana", group = 1))+
labs(
title = "Prezzi in generale",
subtitle = "Prezzo medio di un videogioco e mediana prezzi per anno",
x = "Anno",
y = "USD"
)+
guides(colour=guide_legend(title="Legenda"))+
scale_x_discrete(breaks = seq(min_year, max_year, by = 5))
games_prices_summarized_multi_single <- games_w_prices %>%
filter(!is.na(price_norm)) %>%
group_by(year_of_pub, category_norm) %>%
mutate(mean_price_per_year=mean(price_norm)) %>%
mutate(median_price_per_year=median(price_norm)) %>%
select(year_of_pub,mean_price_per_year,median_price_per_year, category_norm)
games_prices_summarized_multi_single
min_year <- min(games_prices_summarized[["year_of_pub"]])
max_year <- max(games_prices_summarized[["year_of_pub"]])
ggplot(data = games_prices_summarized_multi_single)+
geom_line(mapping = aes(x=.data[["year_of_pub"]], y=.data[["mean_price_per_year"]], color=.data[["category_norm"]], group = .data[["category_norm"]], linetype="solid"))+
geom_line(mapping = aes(x=.data[["year_of_pub"]], y=.data[["median_price_per_year"]], color=.data[["category_norm"]], group = .data[["category_norm"]], linetype="twodash"))+
labs(
title = "Prezzi per categoria negli anni",
subtitle = "Prezzo medio di un videogioco e mediana prezzi per anno divisi fra single/multiplayer",
x = "Anno",
y = "USD"
)+
guides(colour=guide_legend(title="Categoria"),linetype=guide_legend(title="Media/Mediana"))+
scale_color_discrete(labels=c("Solo MMO", "Multiplayer no MMO", "Altro", "Solo Singleplayer"))+
scale_linetype_discrete(labels=c("Media", "Mediana"))+
scale_x_discrete(breaks = seq(min_year, max_year, by = 5))
remove_too_many_categories <- function(x){
if(x=="MX"){
return(NA)
}
if(x=="SPO"){
return(x)
}
return("GMP")
}
games_prices_summarized_multi_single_simplified <- games_w_prices %>%
filter(!is.na(price_norm)) %>%
mutate(category_norm=sapply(category_norm, remove_too_many_categories)) %>%
filter(!is.na(category_norm)) %>%
group_by(year_of_pub, category_norm) %>%
mutate(mean_price_per_year=mean(price_norm)) %>%
mutate(median_price_per_year=median(price_norm)) %>%
select(year_of_pub,mean_price_per_year,median_price_per_year, category_norm)
games_prices_summarized_multi_single
min_year <- min(games_prices_summarized[["year_of_pub"]])
max_year <- max(games_prices_summarized[["year_of_pub"]])
ggplot(data = games_prices_summarized_multi_single_simplified)+
geom_line(mapping = aes(x=.data[["year_of_pub"]], y=.data[["mean_price_per_year"]], color=.data[["category_norm"]], group = .data[["category_norm"]], linetype="solid"))+
geom_line(mapping = aes(x=.data[["year_of_pub"]], y=.data[["median_price_per_year"]], color=.data[["category_norm"]], group = .data[["category_norm"]], linetype="twodash"))+
labs(
title = "Prezzi per categoria negli anni semplificato",
subtitle = "Prezzo medio di un videogioco e mediana prezzi per anno per ogni categoria",
x = "Anno",
y = "USD"
)+
guides(colour=guide_legend(title="Categoria"),linetype=guide_legend(title="Media/Mediana"))+
scale_color_discrete(labels=c("Multiplayer Generico", "Solo Singleplayer"))+
scale_linetype_discrete(labels=c("Media", "Mediana"))+
scale_x_discrete(breaks = seq(min_year, max_year, by = 5))
games_w_prices_categorized <- games_w_prices %>%
filter(!is.na(price_norm)) %>%
mutate(cuts=cut(price_norm, c(0,5,10,15,20,25,30,35,40,45,50,55,60,+Inf), include_lowest=TRUE, right=FALSE)) %>%
select(cuts, year_of_pub)
games_w_prices_categorized
min_year <- min(games_w_prices_categorized[["year_of_pub"]])
max_year <- max(games_w_prices_categorized[["year_of_pub"]])
ggplot(data = games_w_prices_categorized)+
geom_bar(mapping = aes(x=.data[["year_of_pub"]], fill=.data[["cuts"]]))+
labs(
title = "Fasce di prezzo assolute",
subtitle = "Numero di pubblicazioni per anno di videogiochi in ogni fascia di prezzo",
x = "Anno",
y = "Numero pubblicazioni"
)+
guides(fill=guide_legend(title="Categorie prezzo USD\n(incluso, escluso)"))+
scale_fill_discrete(labels=c("Fino a 5 USD",
"Fra 5 e 10 USD",
"Fra 10 e 15 USD",
"Fra 15 e 20 USD",
"Fra 20 e 25 USD",
"Fra 25 e 30 USD",
"Fra 30 e 35 USD",
"Fra 35 e 40 USD",
"Fra 40 e 45 USD",
"Fra 45 e 50 USD",
"Fra 50 e 55 USD",
"Fra 55 e 60 USD",
"Più di 60 USD"))+
scale_x_discrete(breaks = seq(min_year, max_year, by = 5))
ggplot(data = games_w_prices_categorized %>%
filter(year_of_pub>=2000, year_of_pub<=2020))+
geom_bar(mapping = aes(x=.data[["year_of_pub"]], fill=.data[["cuts"]]), position = "fill")+
labs(
title = "Fasce di prezzo relative",
subtitle = "Numero percentuale di pubblicazioni per anno di videogiochi in ogni fascia di prezzo",
x = "Anno",
y = "Percentuale di tutti i giochi in quell'anno"
)+
guides(fill=guide_legend(title="Categorie prezzo USD\n(incluso, escluso)"))+
scale_fill_discrete(labels=c("Fino a 5 USD",
"Fra 5 e 10 USD",
"Fra 10 e 15 USD",
"Fra 15 e 20 USD",
"Fra 20 e 25 USD",
"Fra 25 e 30 USD",
"Fra 30 e 35 USD",
"Fra 35 e 40 USD",
"Fra 40 e 45 USD",
"Fra 45 e 50 USD",
"Fra 50 e 55 USD",
"Fra 55 e 60 USD",
"Più di 60 USD"))+
scale_x_discrete(breaks = seq(min_year, max_year, by = 5))
games_in_a_year_grouped_mod<-games_in_a_year_grouped %>%
rename(year_of_pubX=year_of_pub)
games_in_a_year_grouped_mod
games_w_prices_categorized2 <- games_w_prices_categorized %>%
count(year_of_pub, cuts) %>%
rename(year_of_pubY=year_of_pub) %>%
inner_join(games_in_a_year_grouped_mod, by=c("year_of_pubY"="year_of_pubX"), keep=TRUE) %>%
mutate(percentage_of_price_category_per_year=n.x/n.y) %>%
select(year_of_pubX, cuts, percentage_of_price_category_per_year) %>%
rename(year_of_pub=year_of_pubX) %>%
arrange(year_of_pub, cuts)
games_w_prices_categorized2
games_wo_publisher_prices<-steam_numbers_norm %>%
filter(is.na(publisher), .keep_all=TRUE) %>%
distinct(name, .keep_all=TRUE) %>%
filter(!is.na(year_of_pub)) %>%
filter(!is.na(price_norm))
games_wo_publisher_prices
games_wo_publisher_prices_summarized <- games_wo_publisher_prices %>%
group_by(year_of_pub) %>%
mutate(mean_price_per_year=mean(price_norm)) %>%
select(year_of_pub, mean_price_per_year)
games_wo_publisher_prices_summarized
games_w_publisher_prices<-steam_numbers_norm %>%
filter(!is.na(publisher), .keep_all=TRUE) %>%
distinct(name, .keep_all=TRUE) %>%
filter(!is.na(year_of_pub)) %>%
filter(!is.na(price_norm))
games_w_publisher_prices
games_w_publisher_prices_summarized <- games_w_publisher_prices %>%
group_by(year_of_pub) %>%
mutate(mean_price_per_year=mean(price_norm)) %>%
select(year_of_pub, mean_price_per_year)
games_w_publisher_prices_summarized
min_year <- min(games_wo_publisher_prices_summarized[["year_of_pub"]])
max_year <- max(games_wo_publisher_prices_summarized[["year_of_pub"]])
ggplot()+
geom_line(data=games_w_publisher_prices_summarized,
mapping = aes(x=.data[["year_of_pub"]], y=.data[["mean_price_per_year"]], color="Con publisher", group = 1))+
geom_line(data=games_wo_publisher_prices_summarized,
mapping = aes(x=.data[["year_of_pub"]], y=.data[["mean_price_per_year"]],
color="No publisher", group = 1))+
labs(
title = "E' utile avere un publisher?",
subtitle = "Prezzo medio dei videogiochi divisi per anno di pubblicazione e per presenza di un publisher",
x = "Anno",
y = "USD"
)+
guides(colour=guide_legend(title="Legenda"))+
scale_x_discrete(breaks = seq(min_year, max_year, by = 5))
best_games <- steam_numbers_norm %>%
distinct(name, .keep_all = TRUE) %>%
arrange(-`positive%`, -`positive%30d`) %>%
filter(total > 10000) %>%
select(name, date, all_reviews, user_reviews, category_norm, url)
best_games
#voglio tutte le info riguardanti il gioco che abbiamo, let's go
best_title <- best_games %>%
slice_head() %>%
select(name)
best_title_string <- best_title[["name"]][[1]]
best_title_string
henry_stick_coll <- steam_numbers_norm %>%
filter(name == best_title_string) %>%
rename(urlX=url) %>%
inner_join(
(steam_text_original %>%
rename(urlY=url)
), by=c("urlX"="urlY"), keep=TRUE)
henry_stick_coll
henry_stick_coll_not_norm <- steam_numbers_original %>%
filter(name == best_title_string) %>%
select(developer, publisher)
henry_stick_coll_not_norm
img_url <- henry_stick_coll[["img_url"]][[1]]
old_games <- steam_numbers_norm %>%
distinct(name, .keep_all = TRUE) %>%
select(name, year_of_pub, total30d, `positive%30d`, category_norm) %>%
filter(!is.na(total30d), !is.na(`positive%30d`)) %>%
filter(!is.na(year_of_pub)) %>%
arrange(year_of_pub)
old_games
min_year <- min(old_games[["year_of_pub"]])
max_year <- max(old_games[["year_of_pub"]])
ggplot(data = old_games)+
geom_point(mapping = aes(x=.data[["year_of_pub"]], y=.data[["positive%30d"]], size=.data[["total30d"]], color=.data[["category_norm"]]), alpha=0.2)+
labs(
title = "La fanbase e i giochi retrò",
subtitle = "Giochi divisi per categoria, recensioni degli ultimi 30 giorni e anno di pubblicazione",
x = "Anno",
y = "Review positive %"
)+
scale_x_discrete(breaks = seq(min_year, max_year, by = 5))+
geom_hline(yintercept=75, color="red", size=1)+
geom_vline(xintercept = "2010", color="red", size=1)+
guides(color=guide_legend(title="Categoria"))+
guides(size=guide_legend(title="Recensioni ultimi\n30 giorni"))
de_pu_links <- steam_numbers_norm %>%
select(developer, publisher) %>%
filter(!is.na(developer), !is.na(publisher)) %>%
filter(developer!=publisher) %>%
distinct(developer, publisher)
de_pu_links
edges_tbl=tibble(
from=de_pu_links[["publisher"]],
to=de_pu_links[["developer"]]
)
edges_tbl
de_final <- de_pu_links %>%
distinct(developer) %>%
mutate(isDev=TRUE) %>%
rename(name=developer)
de_final
de_final_num <- de_final %>%
summarise(count=n())
pu_final <- de_pu_links %>%
distinct(publisher) %>%
mutate(isDev=FALSE) %>%
rename(name=publisher)
pu_final
pu_final_num <- pu_final %>%
summarise(count=n())
union_dev_pub <- union(de_final, pu_final)
union_dev_pub
nodes_tbl <- tibble(
name=union_dev_pub[["name"]],
isDev=union_dev_pub[["isDev"]]
)
nodes_tbl
graph_to_display <- tbl_graph(nodes=nodes_tbl, edges=edges_tbl, directed=FALSE)
ggraph(graph_to_display, layout = "graphopt")+
geom_edge_link()+
geom_node_point(mapping = aes(colour=nodes_tbl[["isDev"]], alpha=0.1))+
guides(color=guide_legend(title="Ruolo"))+
scale_alpha_continuous(guide="none")+
scale_color_discrete(labels = c("Publisher","Developer"))
ggraph(graph_to_display, layout = "kk")+
geom_edge_link()+
geom_node_point(mapping = aes(colour=nodes_tbl[["isDev"]], alpha=0.1))+
guides(color=guide_legend(title="Ruolo"))+
scale_alpha_continuous(guide="none")+
scale_color_discrete(labels = c("Publisher","Developer"))
pubs_limited <- steam_numbers_norm %>%
select(developer, publisher) %>%
filter(!is.na(developer), !is.na(publisher)) %>%
filter(developer!=publisher) %>%
distinct(developer, publisher) %>%
count(publisher) %>%
arrange(-n) %>%
filter(n > 5)
pubs_limited
de_pu_links_limited <- steam_numbers_norm %>%
select(developer, publisher) %>%
filter(!is.na(developer), !is.na(publisher)) %>%
filter(developer!=publisher) %>%
distinct(developer, publisher) %>%
semi_join(pubs_limited %>%
distinct(publisher) %>%
select(publisher))
de_pu_links_limited
edges_tbl_limited <- tibble(
from=de_pu_links_limited[["publisher"]],
to=de_pu_links_limited[["developer"]]
)
edges_tbl_limited
de_final_limited <- de_pu_links_limited %>%
distinct(developer) %>%
mutate(isDev=TRUE) %>%
rename(name=developer)
de_final_limited
de_final_num_limited <- de_final_limited %>%
summarise(count=n())
pu_final_limited <- de_pu_links_limited %>%
distinct(publisher) %>%
mutate(isDev=FALSE) %>%
rename(name=publisher)
pu_final_limited
pu_final_num_limited <- pu_final_limited %>%
summarise(count=n())
union_dev_pub_limited <- union(de_final_limited, pu_final_limited) %>%
distinct(name, .keep_all = TRUE) #per evitare problemi con developers che sono anche publishers (THQ Nordic è l'unico caso - tralasciamo)
#altrimenti, due nodi con nome uguale, collega tutti al primo che trova nella tibble
#e l'altro rimane vuoto...
union_dev_pub_limited
nodes_tbl_limited <- tibble(
name=union_dev_pub_limited[["name"]],
isDev=union_dev_pub_limited[["isDev"]]
)
nodes_tbl_limited
pub_dev_net_limited <- tbl_graph(nodes=nodes_tbl_limited, edges=edges_tbl_limited, directed=FALSE)
ggraph(pub_dev_net_limited, layout = "graphopt")+
geom_edge_link(alpha=0.1)+
geom_node_point(mapping = aes(colour=nodes_tbl_limited[["isDev"]], alpha=0.2))+
guides(color=guide_legend(title="Ruolo"))+
scale_alpha_continuous(guide="none")+
scale_color_discrete(labels = c("Publisher","Developer"))
#geom_node_text(label=nodes_tbl_limited[["name"]], repel = TRUE)
tbl_graph(nodes=nodes_tbl_limited, edges=edges_tbl_limited, directed=FALSE) %>%
activate(nodes) %>%
mutate(community = as.factor(group_louvain())) %>%
ggraph(layout = "graphopt")+
geom_edge_link(alpha=0.2)+
geom_node_point(mapping = aes(colour=community, alpha=0.1))+
guides(color=guide_legend(title="Ruolo"))+
scale_alpha_continuous(guide="none")
tbl_graph(nodes=nodes_tbl_limited, edges=edges_tbl_limited, directed=FALSE) %>%
activate(nodes) %>%
mutate(pagerank = centrality_pagerank()) %>%
mutate(deg = centrality_degree(mode="all")) %>%
ggraph(layout = "graphopt")+
geom_edge_link(alpha = 0.2)+
geom_node_point(mapping = aes(size = pagerank, colour = deg, alpha=0.1, shape=nodes_tbl_limited[["isDev"]]))+
guides(color=guide_legend(title="Degree Centrality"), size=guide_legend(title="Pagerank"), shape=guide_legend(title="Pub/Dev"))+
scale_alpha_continuous(guide="none")+
scale_shape_discrete(labels = c("Publisher","Developer"))
is_top_pagerank <- function(x){
if(x==top_pagerank[["name"]][[1]]){
return(FALSE)
}
return(TRUE)
}
publisher_most_work <- pubs_limited %>%
slice_head()
publisher_most_work
top_pagerank <- tbl_graph(nodes=nodes_tbl_limited, edges=edges_tbl_limited, directed=FALSE) %>%
activate(nodes) %>%
mutate(pagerank = centrality_pagerank()) %>%
data.frame() %>%
select(name, pagerank) %>%
arrange(-pagerank) %>%
slice_head()
top_pagerank <- tibble(top_pagerank)
top_pagerank
de_pu_links_top_pagerank <- steam_numbers_norm %>%
select(developer, publisher) %>%
filter(publisher == top_pagerank[["name"]][[1]])
de_pu_links_top_pagerank
edges_tbl_top_pagerank <- tibble(
from=de_pu_links_top_pagerank[["publisher"]],
to=de_pu_links_top_pagerank[["developer"]]
)
edges_tbl_top_pagerank
union_dev_pub_top_pagerank <- union((top_pagerank %>%
select(name)
),
(de_pu_links_top_pagerank %>%
select(developer) %>%
rename(name=developer)
)
) %>%
mutate(isDev=sapply(name, is_top_pagerank))
union_dev_pub_top_pagerank
pub_dev_net_top_pagerank <- tbl_graph(nodes=union_dev_pub_top_pagerank, edges=edges_tbl_top_pagerank, directed=FALSE)
pub_dev_net_top_pagerank
#warnings soppressi per ggrepel con troppi overlap
ggraph(pub_dev_net_top_pagerank, layout = "graphopt")+
geom_edge_link(alpha=0.2)+
geom_node_point(mapping = aes(colour=union_dev_pub_top_pagerank[["isDev"]]))+
guides(color=guide_legend(title="Ruolo"))+
scale_color_discrete(labels = c("Publisher","Developer"))+
scale_edge_alpha_continuous(guide="none")+
geom_node_text(label=union_dev_pub_top_pagerank[["name"]], repel = TRUE)
